

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
    boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    


:}
init with {:
    errorDetected = false;
:}
scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString() + "\t" + s.left);
	return s;
:}


/* ==================== TERMINALS ==================== */

terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal String BOOL_CONST;

terminal COMMA;

terminal PROG;

terminal MULTIPLY;
terminal DIVIDE;
terminal MODULO;

terminal PLUS;
terminal MINUS;

terminal EQUALS;
terminal NOT_EQUAL;
terminal LARGER_THAN;
terminal LARGER_EQUAL;
terminal LESS_THAN;
terminal LESS_EQUAL;

terminal ASSIGN;

terminal BRACES_BEGIN;
terminal BRACES_END;

terminal BRACKET_BEGIN;
terminal BRACKET_END;

terminal PARENTHESES_BEGIN;
terminal PARENTHESES_END;

terminal CONST;

terminal SEMI;

terminal CLASS;
terminal EXTENDS;
terminal VOID;

terminal IF;
terminal ELSE;
terminal BREAK;
terminal CONTINUE;
terminal RETURN;
terminal OR;
terminal NEW;
terminal AND;
terminal DOT;
terminal INCREMENT;
terminal DECREMENT;
terminal PRINT;
terminal DO;
terminal WHILE;
terminal SWITCH;
terminal CASE;
terminal COLON;
terminal READ;
terminal QUESTION_MARK;


/* ================== NON-TERMINALS ================== */

/*
nonterminal TernaryCondition;

nonterminal TernaryCondExpression;

nonterminal TernaryCondTerm ;
			
nonterminal TernaryCondFactor;

nonterminal TernaryRelationalExpression ;
*/



nonterminal MulOp;

nonterminal rs.etf.pp1.symboltable.concepts.Obj RelOp;

nonterminal AssignOp;

nonterminal AddOp;

nonterminal Declarations;

nonterminal MethodDeclarations;

nonterminal Decls;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Type;

nonterminal ConstList;

nonterminal Const;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Literals;

nonterminal VariableDeclarations;

nonterminal VariableList;

nonterminal VariableDeclaration;

nonterminal ClassDeclaration;


nonterminal ClassBody;

nonterminal FieldList;

nonterminal ClassMethodList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ReturnType;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDeclaration;

nonterminal MethodVariables;

nonterminal FormPars;

nonterminal Statement;

nonterminal DesignatorStatement;

nonterminal Condition;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ReturnStmts;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr;

nonterminal StatementList;

nonterminal ErrorVariableDeclarations;

nonterminal CondExpression;

nonterminal CondTerm;

nonterminal FormalParameters;

nonterminal rs.etf.pp1.symboltable.concepts.Obj CondFactor;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Term;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Factor;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;

nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorList;

nonterminal SwichCaseDefinition;

nonterminal ActPars;

nonterminal PrintStmtList;

nonterminal SwitchCaseList;

nonterminal CaseStatementList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj RelationalExpression;

nonterminal ErrorVariables;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ExprTern;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ExprNoTern;

nonterminal FormParamsBrackets;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ExprNoTernAddOpList;

nonterminal MethodStatements;

nonterminal ActParsChoice;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodTypeName;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;

/* ===================== GRAMMAR ===================== */

precedence left ELSE;



Program 	::= 
			  (Program) 			PROG 
			  						ProgName
			  						Declarations
			  						BRACES_BEGIN
			  						MethodDeclarations
			  						BRACES_END
			  	;
			  	

ProgName ::= (ProgramName) IDENT:programName;

Declarations ::=
				(DeclarationList)  Declarations Decls
				| (NoDecls)
				;
MethodDeclarations ::= (SingleMethod) MethodDeclaration
					| (MethodDeclList) MethodDeclarations MethodDeclaration
					;
Decls		::= 
				(ConstDeclarations) CONST Type:type ConstList SEMI
				| (VarDeclarations) VariableDeclarations
				| (ClassDeclarations) CLASS ClassDeclaration BRACES_BEGIN ClassBody BRACES_END
				;

ConstList 	::= 
				(SingleConst) Const
				| (MoreConsts) ConstList COMMA Const
	   			;
				
				
Const		::=
				(ConstDefinition) IDENT:identification AssignOp Literals:literals
				;

Literals	::=
				(NumericLiteral) NUM_CONST:numValue
				| (CharLiteral) CHAR_CONST:charValue
				| (BooleanLiteral) BOOL_CONST:booleanValue
				;


VariableDeclarations ::= 
					(VariableDecls) Type:variableType VariableList SEMI
					| (SemiErrorStmt) error SEMI
	   				{:
	   				 Symbol symbol = (Symbol)(CUP$MJParser$stack.elementAt(CUP$MJParser$top));
	   				 parser.report_error("Izvrsen oporavak do ; u liniji " + symbol.left, null);  
	   				:}
					;		
					
ErrorVariableDeclarations ::= 
	   				;

VariableList ::= 
				(SingleVariable) VariableDeclaration
				| (MoreVariables)  ErrorVariables  VariableList
				;
				
ErrorVariables ::= (ErrorNonArrayVariable) IDENT:variableName COMMA
					| (ErrorArrayVariable) IDENT:variableName BRACKET_BEGIN BRACKET_END COMMA
					/*| (CommaErrorStmt) error COMMA
	   				{:
	   				 Symbol symbol = (Symbol)(CUP$MJParser$stack.elementAt(CUP$MJParser$top));
	   				 parser.report_error("Izvrsen oporavak do , u liniji " + symbol.left, null);  
	   				 yyerrok;
	   				:}*/
					;
				
VariableDeclaration ::= 
					(NonArrayVariable) IDENT:variableName
					| (ArrayVariable) IDENT:variableName BRACKET_BEGIN BRACKET_END
					;

ClassDeclaration ::= 
				(RootClass) IDENT:className
				| (ChildClass) IDENT:className EXTENDS Type
				;


ClassBody ::= 
			(ClassBodyWithMethods) FieldList BRACES_BEGIN ClassMethodList BRACES_END
			| (ClassBodyWithoutMethods) FieldList
			;
			
FieldList ::=
			(HasFieldVariables) FieldList VariableDeclarations
			| (NoFields)
			;
			

ClassMethodList ::=
				(HasMethods) ClassMethodList MethodDeclaration
				|
				(NoMethods)
				; 

MethodDeclaration ::= (OneMethodDeclaration) MethodTypeName:methodType PARENTHESES_BEGIN FormalParameters
                                             PARENTHESES_END MethodVariables BRACES_BEGIN MethodStatements BRACES_END
				;
				
MethodTypeName ::= (MethodTypeName) ReturnType IDENT:methodIdentification  ;

MethodStatements ::= (NonEmptyMethodStatements) MethodStatements Statement
				| (EmptyMethodStatements)
				;

FormalParameters ::= (NonEmptyFormalPars) FormPars
					| (EmptyFormPars)
					;

FormPars ::= (FormParsDefinition) Type IDENT:formParamName FormParamsBrackets
			|
			(FormParsDefinitionList) FormPars COMMA Type IDENT:paramName FormParamsBrackets
			;
FormParamsBrackets ::= (HasBrackets) BRACKET_BEGIN BRACKET_END
					| (DoesntHaveBrackets)
					;
ReturnType ::= (TypedReturn) Type:returnType
			| (VoidReturn) VOID:dummy
			;

MethodVariables ::= 
				(HasMethodVariables) MethodVariables VariableDeclarations
				|
				(NoVariables)
				;


Statement 		::= (StatementDesignatorStatement) DesignatorStatement SEMI
				| (IfThenStatement) IF PARENTHESES_BEGIN Condition PARENTHESES_END Statement
				| (IfThenElseStatement) IF PARENTHESES_BEGIN Condition PARENTHESES_END Statement ELSE Statement
				| (DoWhileStatement) DO Statement WHILE PARENTHESES_BEGIN Condition PARENTHESES_END SEMI
				| (SwitchStatement) SWITCH PARENTHESES_BEGIN Expr PARENTHESES_END BRACES_BEGIN SwitchCaseList BRACES_END
				| (BreakStmt) BREAK SEMI
				| (ContinueStmt) CONTINUE SEMI
				| (ReturnStmt) RETURN ReturnStmts SEMI
				| (ReadStmt) READ PARENTHESES_BEGIN Designator PARENTHESES_END SEMI
				| (PrintStmt) PRINT PARENTHESES_BEGIN PrintStmtList PARENTHESES_END SEMI
				| (StatementsList) BRACES_BEGIN StatementList BRACES_END
				;
				
SwitchCaseList ::= 
				(EmptySwitchCaseList) /* epsilon */
				| (NonEmptySwitchCaseList) SwitchCaseList SwichCaseDefinition
				;
				
SwichCaseDefinition ::= (SingleSwitchCaseDefinition) CASE NUM_CONST:numberValue COLON CaseStatementList ;

CaseStatementList ::= (NonEmptyCaseStatementList) CaseStatementList Statement |
					(EmptyCaseStatementList)
					;

PrintStmtList ::= (NoNumConst) Expr
				| (WithNumConst) Expr COMMA NUM_CONST:intValue;
				
StatementList ::= (NonEmptyStatementList) StatementList Statement
					| (EmptyStatement) ;
					
					
DesignatorStatement ::= (AssignDesignator) Designator:designator AssignOp Expr:type
					| (MethodCallDesignator) Designator:designator PARENTHESES_BEGIN ActParsChoice PARENTHESES_END
					| (IncrementDesignator) Designator:designator INCREMENT
					| (DecrementDesignator) Designator:designator DECREMENT
					;



ReturnStmts ::= (NonEmptyReturn) Expr:expr
			| (EmptyReturn)
			;

Condition ::= (Condition) CondExpression ;


CondExpression ::= 
				(ConditionExpressionWithoutOr) CondTerm 
				| (ConditionExpressionWithOr) CondExpression OR CondTerm
				;

CondTerm ::= (ConditionTermWithAnd) CondTerm AND CondFactor
			| (ConditionTermFactor) CondFactor
			;
			
CondFactor ::= (ExpressionConditionFactor) ExprNoTern RelationalExpression
			;

RelationalExpression ::= (NonEmptyRelationalExpression) RelOp ExprNoTern
					| (EmptyRelationalExpression)
					;

Expr ::=  (ExprNoTernStatement) ExprNoTern:e
		|(ExprTernStatement) ExprTern
	;
	
ExprNoTern ::=  (NegativeTerm) MINUS ExprNoTernAddOpList
	| (AddOperationTerm) ExprNoTernAddOpList
	;
	
ExprNoTernAddOpList ::= (TermList) ExprNoTernAddOpList:type_other AddOp Term:type
						| (OneTerm) Term:type
						;
	
ExprTern ::= (TernaryExpressionStmt) CondFactor QUESTION_MARK Expr:exprTrue COLON Expr:exprFalse
			;


Term ::= (NonMullOpTerm) Factor:factorStruct
		| (MullOpTerm) Term:termTree MulOp Factor:factorStruct
		;
	
Factor ::=
		(NoParamsDesignator) Designator:designator 
		| (ParamsDesignator) Designator:designator PARENTHESES_BEGIN ActParsChoice PARENTHESES_END
		| (NumericConstant) NUM_CONST:numValue
		| (CharacterConstant) CHAR_CONST:charValue
		| (BooleanConstant) BOOL_CONST:boolValue
		| (NewType) NEW Type
		| (NewTypeArray) NEW Type BRACKET_BEGIN Expr BRACKET_END
		| (ParenthesesExpression) PARENTHESES_BEGIN Expr PARENTHESES_END
		;

ActParsChoice ::= (EmptyActPars)
		| (NonEmptyActPars) ActPars
		;

ActPars ::= (ActParsWithoutComma) Expr
		| (ActParsWithComma) ActPars COMMA Expr;
		

Designator ::= (CleanDesignator) IDENT:identification
            | (ArrayElementAccessDesignator) DesignatorList BRACKET_BEGIN Expr:expression BRACKET_END
            | (MemberElementAccessDesignator) DesignatorList DOT IDENT:identification
			;

DesignatorList ::= (DesignatorListOneElement) IDENT:identification
				| (FieldCallDesignatorList) DesignatorList DOT IDENT:identification
				| (ArrayElementDesignatorList) DesignatorList BRACKET_BEGIN Expr:expression BRACKET_END
				;

Type 			::= 
		(Type) IDENT:type
		;

RelOp 		::= 
			  (RelopEquals) 		EQUALS
			| (RelopNotEqual)		NOT_EQUAL
			| (RelopLargerThan) 	LARGER_THAN
			| (RelopLargerEqual) 	LARGER_EQUAL
			| (RelopLessThan)		LESS_THAN
			| (RelopLessEqual) 		LESS_EQUAL
			;
		
AssignOp 	::= 
			   (AssignOp) 			ASSIGN
			;

AddOp		 ::= 
			  (AddopPlus) 			PLUS
			| (AddopMinus) 			MINUS
			;

MulOp 		::= 
			  (MulopTimes) 			MULTIPLY
			| (MulopDivide)			DIVIDE
			| (MulopModulo)			MODULO
			;


/*
TernaryCondition ::= (TernaryCondition) TernaryCondExpression ;


TernaryCondExpression ::=
				(TernaryConditionExpressionWithoutOr) TernaryCondTerm
				| (TernaryConditionExpressionWithOr) TernaryCondExpression OR TernaryCondTerm
				;

TernaryCondTerm ::= (TernaryConditionTermWithAnd) TernaryCondTerm AND TernaryCondFactor
			| (TernaryConditionTermFactor) TernaryCondFactor
			;

TernaryCondFactor ::= (TernaryExpressionConditionFactor) ExprNoTern
			;

TernaryRelationalExpression ::= (TernaryNonEmptyRelationalExpression) RelOp ExprNoTern
					| (TernaryEmptyRelationalExpression)
					;
*/