

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



/* ==================== TERMINALS ==================== */

terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Integer BOOL_CONST;

terminal COMMA;

terminal PROG;

terminal TIMES;
terminal DIVIDE;
terminal MODULO;

terminal PLUS;
terminal MINUS;

terminal EQUALS;
terminal NOT_EQUAL;
terminal LARGER_THAN;
terminal LARGER_EQUAL;
terminal LESS_THAN;
terminal LESS_EQUAL;

terminal ASSIGN;

terminal BRACES_BEGIN;
terminal BRACES_END;

terminal BRACKET_BEGIN;
terminal BRACKET_END;

terminal PARENTHESES_BEGIN;
terminal PARENTHESES_END;

terminal CONST;

terminal SEMI;

terminal CLASS;
terminal EXTENDS;
terminal VOID;

terminal IF;
terminal BREAK;
terminal CONTINUE;
terminal RETURN;
terminal OR;
terminal NEW;
terminal AND;
terminal DOT;
terminal INCREMENT;
terminal DECREMENT;
terminal PRINT;


/* ================== NON-TERMINALS ================== */

nonterminal Program Program;

nonterminal MulOp MulOp;

nonterminal RelOp RelOp;

nonterminal AssignOp AssignOp;

nonterminal AddOp AddOp;

nonterminal Declarations Declarations;

nonterminal MethodDeclarations MethodDeclarations;

nonterminal Decls Decls;

nonterminal Type Type;

nonterminal ConstList ConstList;

nonterminal Const Const;

nonterminal Literals Literals;

nonterminal VariableDeclarations VariableDeclarations;

nonterminal VariableList VariableList;

nonterminal VariableDeclaration VariableDeclaration;

nonterminal ClassDeclaration ClassDeclaration;

nonterminal ClassBody ClassBody;

nonterminal FieldList FieldList;

nonterminal ClassMethodList ClassMethodList;

nonterminal ReturnType ReturnType;

nonterminal MethodDeclaration MethodDeclaration;

nonterminal MethodVariables MethodVariables;

nonterminal FormPars FormPars;

nonterminal Statement Statement;

nonterminal DesignatorStatement DesignatorStatement;

nonterminal Condition Condition;

nonterminal ReturnStmts ReturnStmts;

nonterminal Expr Expr;

nonterminal StatementList StatementList;

nonterminal CondExpression CondExpression;

nonterminal CondTerm CondTerm;

nonterminal CondFactor CondFactor;

nonterminal Term Term;

nonterminal Factor Factor;

nonterminal Designator Designator;

nonterminal DesignatorList DesignatorList;

nonterminal ActPars ActPars;

nonterminal PrintStmtList PrintStmtList;
/* ===================== GRAMMAR ===================== */

Program 	::= 
			  (Program) 			PROG 
			  						IDENT:programName
			  						Declarations:D1
			  						BRACES_BEGIN
			  						MethodDeclarations:M2
			  						BRACES_END {: RESULT=new Program(programName, D1, M2); RESULT.setLine(programNameleft); :};

Declarations ::=
				(DeclarationList) Declarations:D1 Decls:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
				| (NoDecls) {: RESULT=new NoDecls(); :}
				;
				
Decls		::= 
				(ConstDeclarations) CONST Type:T1 ConstList:C2 SEMI {: RESULT=new ConstDeclarations(T1, C2); RESULT.setLine(T1left); :}
				| (VarDeclarations) VariableDeclarations:V1 {: RESULT=new VarDeclarations(V1); RESULT.setLine(V1left); :}
				| (ClassDeclarations) CLASS ClassDeclaration:C1 BRACES_BEGIN ClassBody:C2 BRACES_END {: RESULT=new ClassDeclarations(C1, C2); RESULT.setLine(C1left); :}
				;

ConstList 	::= 
				(SingleConst) Const:C1 {: RESULT=new SingleConst(C1); RESULT.setLine(C1left); :}
				| (MoreConsts) ConstList:C1 COMMA Const:C2 {: RESULT=new MoreConsts(C1, C2); RESULT.setLine(C1left); :};
				
Const		::=
				(ConstDefinition) IDENT:identification ASSIGN Literals:L1 {: RESULT=new ConstDefinition(identification, L1); RESULT.setLine(identificationleft); :};

/* BoolLiteral ima neki random bag da generise neki kod koji ne moze da koristi */

Literals	::=
				(NumericLiteral) NUM_CONST:numValue {: RESULT=new NumericLiteral(numValue); RESULT.setLine(numValueleft); :}
				| (CharLiteral) CHAR_CONST:charValue {: RESULT=new CharLiteral(charValue); RESULT.setLine(charValueleft); :}
				| (BooleanLiteral) BOOL_CONST:booleanValue {: RESULT=new BooleanLiteral(booleanValue); RESULT.setLine(booleanValueleft); :}
				;


VariableDeclarations ::= 
					(VariableDecls) Type:T1 VariableList:V2 SEMI {: RESULT=new VariableDecls(T1, V2); RESULT.setLine(T1left); :}
					;		
	
VariableList ::= 
				(SingleVariable) VariableDeclaration:V1 {: RESULT=new SingleVariable(V1); RESULT.setLine(V1left); :}
				| (MoreVariables) VariableList:V1 COMMA VariableDeclaration:V2 {: RESULT=new MoreVariables(V1, V2); RESULT.setLine(V1left); :}
				;
				
VariableDeclaration ::= 
					(NonArrayVariable) IDENT:variableName {: RESULT=new NonArrayVariable(variableName); RESULT.setLine(variableNameleft); :}
					| (ArrayVariable) IDENT:variableName BRACKET_BEGIN BRACKET_END {: RESULT=new ArrayVariable(variableName); RESULT.setLine(variableNameleft); :}
					;

ClassDeclaration ::= 
				(RootClass) IDENT:className {: RESULT=new RootClass(className); RESULT.setLine(classNameleft); :}
				| (ChildClass) IDENT:className EXTENDS Type:T1 {: RESULT=new ChildClass(className, T1); RESULT.setLine(classNameleft); :}
				;


ClassBody ::= 
			(ClassBodyWithMethods) FieldList:F1 BRACES_BEGIN ClassMethodList:C2 BRACES_END {: RESULT=new ClassBodyWithMethods(F1, C2); RESULT.setLine(F1left); :}
			| (ClassBodyWithoutMethods) FieldList:F1 {: RESULT=new ClassBodyWithoutMethods(F1); RESULT.setLine(F1left); :}
			;
			
FieldList ::=
			(HasFieldVariables) FieldList:F1 VariableDeclarations:V2 {: RESULT=new HasFieldVariables(F1, V2); RESULT.setLine(F1left); :}
			| (NoFields) {: RESULT=new NoFields(); :}
			;
			

ClassMethodList ::=
				(HasMethods) ClassMethodList:C1 MethodDeclaration:M2 {: RESULT=new HasMethods(C1, M2); RESULT.setLine(C1left); :}
				|
				(NoMethods) {: RESULT=new NoMethods(); :}
				; 

MethodDeclaration ::= 
				(OneMethodDeclaration) ReturnType:R1
				IDENT:I2 
				PARENTHESES_BEGIN 
					FormPars:F3 
				PARENTHESES_END
				
				MethodVariables:M4 
				
				BRACES_BEGIN
					Statement:S5
				BRACES_END {: RESULT=new OneMethodDeclaration(R1, I2, F3, M4, S5); RESULT.setLine(R1left); :}
				;

MethodVariables ::= 
				(HasMethodVariables) MethodVariables:M1 VariableDeclarations:V2 {: RESULT=new HasMethodVariables(M1, V2); RESULT.setLine(M1left); :}
				|
				(NoVariables) {: RESULT=new NoVariables(); :}
				;


Statement 		::= (DesignatorStatement) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatement(D1); RESULT.setLine(D1left); :}
				| (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
				| (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
				| (ReturnStmt) RETURN ReturnStmts:R1 SEMI {: RESULT=new ReturnStmt(R1); RESULT.setLine(R1left); :}
				| (PrintStmt) PRINT PARENTHESES_BEGIN PrintStmtList:P1 PARENTHESES_END SEMI {: RESULT=new PrintStmt(P1); RESULT.setLine(P1left); :}
				| (StatementsList) BRACES_BEGIN StatementList:S1 BRACES_END {: RESULT=new StatementsList(S1); RESULT.setLine(S1left); :}
				;
PrintStmtList ::= (NoNumConst) Expr:E1 {: RESULT=new NoNumConst(E1); RESULT.setLine(E1left); :}
				| (WithNumConst) Expr:E1 COMMA NUM_CONST:N2 {: RESULT=new WithNumConst(E1, N2); RESULT.setLine(E1left); :};
				
StatementList ::= (NonEmptyStatementList) StatementList:S1 Statement:S2 {: RESULT=new NonEmptyStatementList(S1, S2); RESULT.setLine(S1left); :}
					| (EmptyStatement) {: RESULT=new EmptyStatement(); :} ;
					
					
DesignatorStatement ::= (AssignDesignator) Designator:D1 ASSIGN Expr:E2 {: RESULT=new AssignDesignator(D1, E2); RESULT.setLine(D1left); :}
					| (MethodCallDesignator) Designator:D1 PARENTHESES_BEGIN ActPars:A2 PARENTHESES_END {: RESULT=new MethodCallDesignator(D1, A2); RESULT.setLine(D1left); :}
					| (IncrementDesignator) Designator:D1 INCREMENT {: RESULT=new IncrementDesignator(D1); RESULT.setLine(D1left); :}
					| (DecrementDesignator) Designator:D1 DECREMENT {: RESULT=new DecrementDesignator(D1); RESULT.setLine(D1left); :}
					;

Condition ::= (EMPTY) {: RESULT=new EMPTY(); :};

ReturnStmts ::= (NonEmptyReturn) Expr:E1 {: RESULT=new NonEmptyReturn(E1); RESULT.setLine(E1left); :} 
			| (EmptyReturn) {: RESULT=new EmptyReturn(); :};

CondExpression ::= 
				(ConditionExpressionWithoutOr) CondTerm:C1 {: RESULT=new ConditionExpressionWithoutOr(C1); RESULT.setLine(C1left); :} 
				| (ConditionExpressionWithOr) CondExpression:C1 OR CondTerm:C2 {: RESULT=new ConditionExpressionWithOr(C1, C2); RESULT.setLine(C1left); :}
				;

CondTerm ::= (ConditionTermWithAnd) CondExpression:C1 AND CondFactor:C2 {: RESULT=new ConditionTermWithAnd(C1, C2); RESULT.setLine(C1left); :}
			| (ConditionTermFactor) CondFactor:C1 {: RESULT=new ConditionTermFactor(C1); RESULT.setLine(C1left); :}
			;
			
CondFactor ::= (ExpressionConditionFactor) Expr:E1 {: RESULT=new ExpressionConditionFactor(E1); RESULT.setLine(E1left); :}
			| (RelOpConditionFactor) Expr:E1 RelOp:R2 Expr:E3 {: RESULT=new RelOpConditionFactor(E1, R2, E3); RESULT.setLine(E1left); :}
			;
			
			
Expr ::= (Term) Term:T1 {: RESULT=new Term(T1); RESULT.setLine(T1left); :}
	| (NegativeTerm) MINUS Term:T1 {: RESULT=new NegativeTerm(T1); RESULT.setLine(T1left); :}
	| (AddOperationTerm) Expr:E1 AddOp:A2 Term:T3 {: RESULT=new AddOperationTerm(E1, A2, T3); RESULT.setLine(E1left); :};

Term ::= (NonMullOpTerm) Factor:F1 {: RESULT=new NonMullOpTerm(F1); RESULT.setLine(F1left); :}
		| (MullOpTerm) Term:T1 MulOp:M2 Factor:F3 {: RESULT=new MullOpTerm(T1, M2, F3); RESULT.setLine(T1left); :}
		;
	
Factor ::=
		(NoParamsDesignator) Designator:D1 {: RESULT=new NoParamsDesignator(D1); RESULT.setLine(D1left); :} 
		| (ParamsDesignator) Designator:D1 PARENTHESES_BEGIN ActPars:A2 PARENTHESES_END {: RESULT=new ParamsDesignator(D1, A2); RESULT.setLine(D1left); :}
		| (NumericConstant) NUM_CONST:numValue {: RESULT=new NumericConstant(numValue); RESULT.setLine(numValueleft); :}
		| (CharacterConstant) CHAR_CONST:charValue {: RESULT=new CharacterConstant(charValue); RESULT.setLine(charValueleft); :}
		| (BooleanConstant) BOOL_CONST:boolValue {: RESULT=new BooleanConstant(boolValue); RESULT.setLine(boolValueleft); :}
		| (NewType) NEW Type:T1 {: RESULT=new NewType(T1); RESULT.setLine(T1left); :}
		| (NewTypeArray) NEW Type:T1 BRACKET_BEGIN Expr:E2 BRACKET_END {: RESULT=new NewTypeArray(T1, E2); RESULT.setLine(T1left); :}
		| (ParenthesesExpression) PARENTHESES_BEGIN Expr:E1 PARENTHESES_END {: RESULT=new ParenthesesExpression(E1); RESULT.setLine(E1left); :}
		;

ActPars ::= (ActParsWithoutComma) Expr:E1 {: RESULT=new ActParsWithoutComma(E1); RESULT.setLine(E1left); :}
		| (ActParsWithComma) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsWithComma(A1, E2); RESULT.setLine(A1left); :};
Designator ::= (CleanDesignator) IDENT:identification {: RESULT=new CleanDesignator(identification); RESULT.setLine(identificationleft); :}
			| (FieldCallDesignator) DesignatorList:D1 DOT IDENT:identification {: RESULT=new FieldCallDesignator(D1, identification); RESULT.setLine(D1left); :}
			| (ArrayElementDesignator) DesignatorList:D1 BRACKET_BEGIN Expr:E2 BRACKET_END {: RESULT=new ArrayElementDesignator(D1, E2); RESULT.setLine(D1left); :}
			;

DesignatorList ::= (CleanDesignatorList) IDENT:identification {: RESULT=new CleanDesignatorList(identification); RESULT.setLine(identificationleft); :}
				| (FieldCallDesignatorList) DesignatorList:D1 DOT IDENT:identification {: RESULT=new FieldCallDesignatorList(D1, identification); RESULT.setLine(D1left); :}
				| (ArrayElementDesignatorList) DesignatorList:D1 BRACKET_BEGIN Expr:E2 BRACKET_END {: RESULT=new ArrayElementDesignatorList(D1, E2); RESULT.setLine(D1left); :}
				;

Type 			::= 
		(Type) IDENT:type {: RESULT=new Type(type); RESULT.setLine(typeleft); :}
		;

RelOp 		::= 
			  (RelopEquals) 		EQUALS {: RESULT=new RelopEquals(); :}
			| (RelopNotEqual)		NOT_EQUAL {: RESULT=new RelopNotEqual(); :}
			| (RelopLargerThan) 	LARGER_THAN {: RESULT=new RelopLargerThan(); :}
			| (RelopLargerEqual) 	LARGER_EQUAL {: RESULT=new RelopLargerEqual(); :}
			| (RelopLessThan)		LESS_THAN {: RESULT=new RelopLessThan(); :}
			| (RelopLessEqual) 		LESS_EQUAL {: RESULT=new RelopLessEqual(); :}
			;
		
AssignOp 	::= 
			   (AssignOp) 			ASSIGN {: RESULT=new AssignOp(); :}
			;

AddOp		 ::= 
			  (AddopPlus) 			PLUS {: RESULT=new AddopPlus(); :}
			| (AddopMinus) 			MINUS {: RESULT=new AddopMinus(); :}
			;

MulOp 		::= 
			  (MulopTimes) 			TIMES {: RESULT=new MulopTimes(); :}
			| (MulopDivide)			DIVIDE {: RESULT=new MulopDivide(); :}
			| (MulopModulo)			MODULO {: RESULT=new MulopModulo(); :}
			;
